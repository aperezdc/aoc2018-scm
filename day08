#! /usr/bin/env -S chibi-scheme -q
; vim:set ft=scheme:

(import (chibi io)
        (chibi match)
        (scheme list)
        (srfi 9))

(define-record-type Node
                    (node children metadata)
                    node?
                    (children node-children)
                    (metadata node-metadata))

;
; Obtains the value for a node. This follows the definition directly:
;
;  - For nodes with zero children, the sum of the metadata values.
;  - For nodes with children, take the metadata values as node indices,
;    and sum the values of the nodes references by the indices.
;
; When metadata values are used as indices, they are 1-based, and invalid
; indexes are skipped (no value is added for them).
;
(define (node-value node)
  (if (null? (node-children node))
    (fold + 0 (node-metadata node))
    (fold + 0 (map (lambda (index)
                     (define i (- index 1))
                     (if (< i 0) 0
                       (if (< i (length (node-children node)))
                         (node-value (list-ref (node-children node) i))
                         0)))
                   (node-metadata node)))))

;
; Summ all the metadata values of the node and its subnodes.
;
(define (node-sum-metadata node)
  (+ (fold + 0 (node-metadata node))
     (fold + 0 (map node-sum-metadata (node-children node)))))

;
; list[num] -> node
;
(define (node-parse input)
  ;
  ; Auxiliar function to parse a single node, returns (node . rest)
  ;
  (define (node-parse-one in)
    ;
    ; Auxiliar function to parse N nodes, returns (node-list . rest)
    ;
    ;   - "n" keeps the count of nodes pending to parse.
    ;   - "rest" keeps the list of remaining input values.
    ;   - "result" accumulates the N nodes as a list, in reverse.
    ;
    ; Without nodes pending to parse: The result list has been accumulated
    ; in reverse order, therefore we need to reverse it before returning.
    ;
    ; Otherwise, parse a single node to obtain the list of remaining input
    ; and call recursively decreasing N, passing remaining input and the
    ; the result with the just parsed node prepended.
    ;
    (define (node-parse-childn n rest result)
      (if (zero? n)
        (cons (reverse! result) rest)
        (match (node-parse-one rest)
               ((c . r) (node-parse-childn (- n 1) r (cons c result))))))

    ;
    ; Items in the input list are: (nchild nmeta . rest)
    ;                               ^^^^^^ ^^^^^   ^^^^
    ;                                car   cadr    cddr
    ;
    (let ((nchild (car in))
          (nmeta (cadr in))
          (rest (cddr in)))
      (match (node-parse-childn nchild rest '())
             ((c . r) (cons (node c (take r nmeta))
                            (drop r nmeta))))))

  ;
  ; Parse one node, and take the node from the (node . rest) result.
  ;
  (car (node-parse-one input)))


(define INPUT (node-parse (port->list read (current-input-port))))

(display "metadata sum: ")
(display (node-sum-metadata INPUT))
(newline)

(display "node value: ")
(display (node-value INPUT))
(newline)
