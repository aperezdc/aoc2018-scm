#! /usr/bin/env -S chibi-scheme -q
; vim:set ft=scheme:

(import (aoc rect)
        (chibi iset)
        (chibi loop)
        (chibi match)
        (chibi parse)
        (scheme charset)
        (scheme hash-table))


(define-grammar claim-grammar
  (space  ((* ,char-set:whitespace)))
  (number ((=> n (+ ,char-set:digit))
           (string->number (list->string n))))
  (*claim ((: "#" ,space (=> c ,number) ,space
              "@" ,space (=> x ,number) ,space
              "," ,space (=> y ,number) ,space
              ":" ,space (=> w ,number) ,space
              "x" ,space (=> h ,number) ,space)
           (cons c (rect x y w h)))))


(define (visit-claim pair cloth)
  (let ((id (car pair))
        (rr (cdr pair)))
    (loop ((for y (up-from (rect-t rr) (to (+ 1 (rect-b rr))))))
          (loop ((for x (up-from (rect-l rr) (to (+ 1 (rect-r rr))))))
                (hash-table-update! cloth
                                    (cons x y)
                                    (lambda (idset) (iset-adjoin! idset id))
                                    (lambda () (iset-adjoin! (make-iset) id))))))
  cloth)

; Maps (x, y) locations to the set IDs which claims the location.
;
(define cloth (parse-fold *claim
                          visit-claim
                          (make-hash-table equal?)
                          (make-parse-stream "<stdin>" (current-input-port))))


(match (hash-table-fold cloth
                        (lambda (_ idset state)
                          (match state (#(count allids overlapids)
                                        (if (> (iset-size idset) 1)
                                          (vector (+ count 1)
                                                  (iset-union! allids idset)
                                                  (iset-union! overlapids idset))
                                          (vector count
                                                  (iset-union! allids idset)
                                                  overlapids)))))
                        (vector 0 (make-iset) (make-iset)))
       (#(count allids overlapids) (begin
                                     (display "Overlapped inches: ")
                                     (display count)
                                     (newline)
                                     (display "Non-overlapping IDs: ")
                                     (display (iset->list (iset-difference allids overlapids)))
                                     (newline))))
